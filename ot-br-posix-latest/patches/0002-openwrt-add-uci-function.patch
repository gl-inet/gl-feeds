Index: ot-br-posix-2022-11-08-r4.2.3/src/utils/CMakeLists.txt
===================================================================
--- ot-br-posix-2022-11-08-r4.2.3.orig/src/utils/CMakeLists.txt
+++ ot-br-posix-2022-11-08-r4.2.3/src/utils/CMakeLists.txt
@@ -38,8 +38,13 @@ add_library(otbr-utils
     system_utils.cpp
     thread_helper.cpp
     thread_helper.hpp
+    uci.cpp
+    uci.hpp
+    uci_config.cpp
+    uci_config.hpp
 )
 target_link_libraries(otbr-utils PRIVATE
     otbr-common
     mbedtls
+    uci
 )
Index: ot-br-posix-2022-11-08-r4.2.3/src/utils/uci.cpp
===================================================================
--- /dev/null
+++ ot-br-posix-2022-11-08-r4.2.3/src/utils/uci.cpp
@@ -0,0 +1,128 @@
+#include "utils/uci.hpp"
+
+#include <string>
+
+#include <stdio.h>
+#include <string.h>
+
+namespace otbr {
+
+namespace Utils {
+
+int UciGet(const char *aPath, char *aOut)
+{
+    struct uci_context *ctx = uci_alloc_context();
+    struct uci_ptr      ptr;
+    struct uci_element *e;
+    char               *p_config = strdup(aPath);
+
+    /* Check if the configuration file exists */
+    if (uci_lookup_ptr(ctx, &ptr, p_config, true) != UCI_OK)
+    {
+        goto err;
+    }
+
+    /* Check if the configuration item exists */
+    if (!(ptr.flags & UCI_LOOKUP_COMPLETE))
+    {
+        ctx->err = UCI_ERR_NOTFOUND;
+        goto err;
+    }
+
+    e = ptr.last;
+    switch (e->type)
+    {
+    case UCI_TYPE_SECTION:
+        strcat(aOut, ptr.s->type);
+        break;
+    case UCI_TYPE_OPTION:
+    {
+        switch (ptr.o->type)
+        {
+        case UCI_TYPE_STRING:
+            strcat(aOut, ptr.o->v.string);
+            break;
+        case UCI_TYPE_LIST:
+        {
+            struct uci_element *e;
+            uci_foreach_element(&ptr.o->v.list, e)
+            {
+                strcat(aOut, e->name);
+                strcat(aOut, " ");
+            }
+            aOut[strlen(aOut) - 1] = '\0'; // remove the last space
+            break;
+        }
+        default:
+            break;
+        }
+        break;
+    }
+    default:
+        break;
+    }
+
+    uci_free_context(ctx);
+    free(p_config);
+    return 0;
+err:
+    free(p_config);
+    return -1;
+}
+
+int UciSet(const char *aPath, char *aValue)
+{
+    char                str[256] = {0};
+    struct uci_ptr      ptr;
+    struct uci_context *ctx = uci_alloc_context();
+
+    sprintf(str, "%s=%s", aPath, aValue);
+
+    if (uci_lookup_ptr(ctx, &ptr, str, true) != UCI_OK)
+    {
+        goto err;
+    }
+
+    if (uci_set(ctx, &ptr) != UCI_OK)
+    {
+        goto err;
+    }
+
+    uci_save(ctx, ptr.p);
+
+    uci_commit(ctx, &ptr.p, false);
+
+    uci_free_context(ctx);
+    return 0;
+
+err:
+    uci_free_context(ctx);
+    return -1;
+}
+
+int UciDel(const char *aPath)
+{
+    char                str[256] = {0};
+    struct uci_ptr      ptr;
+    struct uci_context *ctx = uci_alloc_context();
+
+    sprintf(str, "%s", aPath);
+
+    if (uci_lookup_ptr(ctx, &ptr, str, true) != UCI_OK)
+    {
+        goto err;
+    }
+
+    if (uci_delete(ctx, &ptr) == UCI_OK)
+        uci_save(ctx, ptr.p);
+
+    uci_free_context(ctx);
+    return 0;
+err:
+    uci_free_context(ctx);
+    return -1;
+}
+
+} // namespace Utils
+
+} // namespace otbr
Index: ot-br-posix-2022-11-08-r4.2.3/src/utils/uci.hpp
===================================================================
--- /dev/null
+++ ot-br-posix-2022-11-08-r4.2.3/src/utils/uci.hpp
@@ -0,0 +1,34 @@
+#ifndef OTBR_UTILS_UCI_HPP_
+#define OTBR_UTILS_UCI_HPP_
+
+#include "openthread-br/config.h"
+
+#include <stddef.h>
+#include <stdint.h>
+
+extern "C" {
+#include <uci.h>
+#ifndef UCI_LOOKUP_DONE
+#define UCI_LOOKUP_DONE (1 << 0)
+#endif
+#ifndef UCI_LOOKUP_COMPLETE
+#define UCI_LOOKUP_COMPLETE (1 << 1)
+#endif
+#ifndef UCI_LOOKUP_EXTENDED
+#define UCI_LOOKUP_EXTENDED (1 << 2)
+#endif
+}
+
+namespace otbr {
+
+namespace Utils {
+
+int UciGet(const char *aPath, char *aOut);
+int UciSet(const char *aPath, char *aValue);
+int UciDel(const char *aPath);
+
+} // namespace Utils
+
+} // namespace otbr
+
+#endif // OTBR_UTILS_UCI_
Index: ot-br-posix-2022-11-08-r4.2.3/src/utils/uci_config.cpp
===================================================================
--- /dev/null
+++ ot-br-posix-2022-11-08-r4.2.3/src/utils/uci_config.cpp
@@ -0,0 +1,103 @@
+#define OTBR_LOG_TAG "UTILS"
+
+#include "utils/uci_config.hpp"
+
+#include <stdio.h>
+#include <string.h>
+#include <sys/stat.h>
+
+#include <openthread/backbone_router_ftd.h>
+#include <openthread/border_router.h>
+#include <openthread/dataset.h>
+#include <openthread/dataset_ftd.h>
+#include <openthread/instance.h>
+#include <openthread/ip6.h>
+#include <openthread/joiner.h>
+#include <openthread/logging.h>
+#include <openthread/netdata_publisher.h>
+#include <openthread/srp_server.h>
+#include <openthread/thread.h>
+#include <openthread/thread_ftd.h>
+#include "common/code_utils.hpp"
+#include "common/logging.hpp"
+#include "utils/hex.hpp"
+#include "utils/uci.hpp"
+
+namespace otbr {
+
+namespace Utils {
+
+int otConfigInitFromUCI(otInstance *aInstance)
+{
+    otError error                = OT_ERROR_NONE;
+    char    sLogLevel[4]         = {0};
+    char    sTxPower[4]          = {0};
+    char    sRCPVersion[120]     = {0};
+    char    sPosixVersion[120]   = {0};
+    char    sThreadVersion[8]    = {0};
+    char    sThreadAPIVersion[8] = {0};
+    char    sEUI64[32]           = {0};
+
+    const char *aRCPVersion = otPlatRadioGetVersionString(aInstance);
+    otbr::Utils::UciGet("otbr.otbr.rcp_version", sRCPVersion);
+    if (strlen(sRCPVersion) == 0 || strcmp(sRCPVersion, aRCPVersion))
+    {
+        otbr::Utils::UciSet("otbr.otbr.rcp_version", (char *)aRCPVersion);
+    }
+
+    const char *aPosixVersion = otGetVersionString();
+    otbr::Utils::UciGet("otbr.otbr.posix_version", sPosixVersion);
+    if (strlen(sPosixVersion) == 0 || strcmp(sPosixVersion, aPosixVersion))
+    {
+        otbr::Utils::UciSet("otbr.otbr.posix_version", (char *)aPosixVersion);
+    }
+
+    uint16_t aThreadVersion = otThreadGetVersion();
+    otbr::Utils::UciGet("otbr.otbr.thread_version", sThreadVersion);
+    if (strlen(sThreadVersion) == 0 || atoi(sThreadVersion) != aThreadVersion)
+    {
+        sprintf(sThreadVersion, "%d", aThreadVersion);
+        otbr::Utils::UciSet("otbr.otbr.thread_version", (char *)sThreadVersion);
+    }
+
+    otbr::Utils::UciGet("otbr.otbr.thread_api_version", sThreadAPIVersion);
+    if (strlen(sThreadAPIVersion) == 0 || atoi(sThreadAPIVersion) != OPENTHREAD_API_VERSION)
+    {
+        sprintf(sThreadAPIVersion, "%d", OPENTHREAD_API_VERSION);
+        otbr::Utils::UciSet("otbr.otbr.thread_api_version", (char *)sThreadAPIVersion);
+    }
+
+    otbr::Utils::UciGet("otbr.otbr.eui64", sEUI64);
+    if (strlen(sEUI64) == 0)
+    {
+        otExtAddress eui64Address;
+        otLinkGetFactoryAssignedIeeeEui64(aInstance, &eui64Address);
+        sprintf(sEUI64, "%02x%02x%02x%02x%02x%02x%02x%02x", eui64Address.m8[0], eui64Address.m8[1], eui64Address.m8[2],
+                eui64Address.m8[3], eui64Address.m8[4], eui64Address.m8[5], eui64Address.m8[6], eui64Address.m8[7]);
+        otbr::Utils::UciSet("otbr.otbr.eui64", (char *)sEUI64);
+    }
+
+    otbr::Utils::UciGet("otbr.otbr.log_level", sLogLevel);
+    if (strlen(sLogLevel) != 0)
+    {
+        if ((error = otLoggingSetLevel(static_cast<otLogLevel>(atoi(sLogLevel)))) != OT_ERROR_NONE)
+            otbrLogErr("otLoggingSetLevel failed");
+    }
+
+    otbr::Utils::UciGet("otbr.otbr.txpower", sTxPower);
+    if (strlen(sTxPower) != 0)
+    {
+        if ((error = otPlatRadioSetTransmitPower(aInstance, static_cast<int8_t>(atoi(sTxPower)))) != OT_ERROR_NONE)
+            otbrLogErr("otPlatRadioSetTransmitPower failed");
+    }
+
+    if (error != OT_ERROR_NONE)
+    {
+        otbrLogErr("%s", otThreadErrorToString(error));
+    }
+    return error;
+}
+
+} // namespace Utils
+
+} // namespace otbr
Index: ot-br-posix-2022-11-08-r4.2.3/src/utils/uci_config.hpp
===================================================================
--- /dev/null
+++ ot-br-posix-2022-11-08-r4.2.3/src/utils/uci_config.hpp
@@ -0,0 +1,27 @@
+#ifndef OTBR_UTILS_UCI_CONFIG_HPP_
+#define OTBR_UTILS_UCI_CONFIG_HPP_
+
+#include "openthread-br/config.h"
+
+#include <openthread/instance.h>
+
+#include <stddef.h>
+#include <stdint.h>
+
+namespace otbr {
+namespace Ncp {
+class ControllerOpenThread;
+}
+} // namespace otbr
+
+namespace otbr {
+
+namespace Utils {
+
+int otConfigInitFromUCI(otInstance *aInstance);
+
+} // namespace Utils
+
+} // namespace otbr
+
+#endif // OTBR_UTILS_UCI_CONFIG_
